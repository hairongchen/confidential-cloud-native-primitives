// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/ccnp-server.proto

package ccnp

import (
        context "context"
        grpc "google.golang.org/grpc"
        codes "google.golang.org/grpc/codes"
        status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
        Ccnp_GetDefaultAlgorithm_FullMethodName = "/ccnp_server_pb.ccnp/GetDefaultAlgorithm"
        Ccnp_GetMeasurementCount_FullMethodName = "/ccnp_server_pb.ccnp/GetMeasurementCount"
        Ccnp_GetCcReport_FullMethodName         = "/ccnp_server_pb.ccnp/GetCcReport"
        Ccnp_GetCcMeasurement_FullMethodName    = "/ccnp_server_pb.ccnp/GetCcMeasurement"
        Ccnp_GetCcEventlog_FullMethodName       = "/ccnp_server_pb.ccnp/GetCcEventlog"
)

// CcnpClient is the client API for Ccnp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CcnpClient interface {
        GetDefaultAlgorithm(ctx context.Context, in *GetDefaultAlgorithmRequest, opts ...grpc.CallOption) (*GetDefaultAlgorithmResponse, error)
        GetMeasurementCount(ctx context.Context, in *GetMeasurementCountRequest, opts ...grpc.CallOption) (*GetMeasurementCountResponse, error)
        GetCcReport(ctx context.Context, in *GetCcReportRequest, opts ...grpc.CallOption) (*GetCcReportResponse, error)
        GetCcMeasurement(ctx context.Context, in *GetCcMeasurementRequest, opts ...grpc.CallOption) (*GetCcMeasurementResponse, error)
        GetCcEventlog(ctx context.Context, in *GetCcEventlogRequest, opts ...grpc.CallOption) (*GetCcEventlogResponse, error)
}

type ccnpClient struct {
        cc grpc.ClientConnInterface
}

func NewCcnpClient(cc grpc.ClientConnInterface) CcnpClient {
        return &ccnpClient{cc}
}

func (c *ccnpClient) GetDefaultAlgorithm(ctx context.Context, in *GetDefaultAlgorithmRequest, opts ...grpc.CallOption) (*GetDefaultAlgorithmResponse, error) {
        out := new(GetDefaultAlgorithmResponse)
        err := c.cc.Invoke(ctx, Ccnp_GetDefaultAlgorithm_FullMethodName, in, out, opts...)
        if err != nil {
                return nil, err
        }
        return out, nil
}

func (c *ccnpClient) GetMeasurementCount(ctx context.Context, in *GetMeasurementCountRequest, opts ...grpc.CallOption) (*GetMeasurementCountResponse, error) {
        out := new(GetMeasurementCountResponse)
        err := c.cc.Invoke(ctx, Ccnp_GetMeasurementCount_FullMethodName, in, out, opts...)
        if err != nil {
                return nil, err
        }
        return out, nil
}

func (c *ccnpClient) GetCcReport(ctx context.Context, in *GetCcReportRequest, opts ...grpc.CallOption) (*GetCcReportResponse, error) {
        out := new(GetCcReportResponse)
        err := c.cc.Invoke(ctx, Ccnp_GetCcReport_FullMethodName, in, out, opts...)
        if err != nil {
                return nil, err
        }
        return out, nil
}

func (c *ccnpClient) GetCcMeasurement(ctx context.Context, in *GetCcMeasurementRequest, opts ...grpc.CallOption) (*GetCcMeasurementResponse, error) {
        out := new(GetCcMeasurementResponse)
        err := c.cc.Invoke(ctx, Ccnp_GetCcMeasurement_FullMethodName, in, out, opts...)
        if err != nil {
                return nil, err
        }
        return out, nil
}

func (c *ccnpClient) GetCcEventlog(ctx context.Context, in *GetCcEventlogRequest, opts ...grpc.CallOption) (*GetCcEventlogResponse, error) {
        out := new(GetCcEventlogResponse)
        err := c.cc.Invoke(ctx, Ccnp_GetCcEventlog_FullMethodName, in, out, opts...)
        if err != nil {
                return nil, err
        }
        return out, nil
}

// CcnpServer is the server API for Ccnp service.
// All implementations must embed UnimplementedCcnpServer
// for forward compatibility
type CcnpServer interface {
        GetDefaultAlgorithm(context.Context, *GetDefaultAlgorithmRequest) (*GetDefaultAlgorithmResponse, error)
        GetMeasurementCount(context.Context, *GetMeasurementCountRequest) (*GetMeasurementCountResponse, error)
        GetCcReport(context.Context, *GetCcReportRequest) (*GetCcReportResponse, error)
        GetCcMeasurement(context.Context, *GetCcMeasurementRequest) (*GetCcMeasurementResponse, error)
        GetCcEventlog(context.Context, *GetCcEventlogRequest) (*GetCcEventlogResponse, error)
        mustEmbedUnimplementedCcnpServer()
}

// UnimplementedCcnpServer must be embedded to have forward compatible implementations.
type UnimplementedCcnpServer struct {
}

func (UnimplementedCcnpServer) GetDefaultAlgorithm(context.Context, *GetDefaultAlgorithmRequest) (*GetDefaultAlgorithmResponse, error) {
        return nil, status.Errorf(codes.Unimplemented, "method GetDefaultAlgorithm not implemented")
}
func (UnimplementedCcnpServer) GetMeasurementCount(context.Context, *GetMeasurementCountRequest) (*GetMeasurementCountResponse, error) {
        return nil, status.Errorf(codes.Unimplemented, "method GetMeasurementCount not implemented")
}
func (UnimplementedCcnpServer) GetCcReport(context.Context, *GetCcReportRequest) (*GetCcReportResponse, error) {
        return nil, status.Errorf(codes.Unimplemented, "method GetCcReport not implemented")
}
func (UnimplementedCcnpServer) GetCcMeasurement(context.Context, *GetCcMeasurementRequest) (*GetCcMeasurementResponse, error) {
        return nil, status.Errorf(codes.Unimplemented, "method GetCcMeasurement not implemented")
}
func (UnimplementedCcnpServer) GetCcEventlog(context.Context, *GetCcEventlogRequest) (*GetCcEventlogResponse, error) {
        return nil, status.Errorf(codes.Unimplemented, "method GetCcEventlog not implemented")
}
func (UnimplementedCcnpServer) mustEmbedUnimplementedCcnpServer() {}

// UnsafeCcnpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CcnpServer will
// result in compilation errors.
type UnsafeCcnpServer interface {
        mustEmbedUnimplementedCcnpServer()
}

func RegisterCcnpServer(s grpc.ServiceRegistrar, srv CcnpServer) {
        s.RegisterService(&Ccnp_ServiceDesc, srv)
}

func _Ccnp_GetDefaultAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
        in := new(GetDefaultAlgorithmRequest)
        if err := dec(in); err != nil {
                return nil, err
        }
        if interceptor == nil {
                return srv.(CcnpServer).GetDefaultAlgorithm(ctx, in)
        }
        info := &grpc.UnaryServerInfo{
                Server:     srv,
                FullMethod: Ccnp_GetDefaultAlgorithm_FullMethodName,
        }
        handler := func(ctx context.Context, req interface{}) (interface{}, error) {
                return srv.(CcnpServer).GetDefaultAlgorithm(ctx, req.(*GetDefaultAlgorithmRequest))
        }
        return interceptor(ctx, in, info, handler)
}

func _Ccnp_GetMeasurementCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
        in := new(GetMeasurementCountRequest)
        if err := dec(in); err != nil {
                return nil, err
        }
        if interceptor == nil {
                return srv.(CcnpServer).GetMeasurementCount(ctx, in)
        }
        info := &grpc.UnaryServerInfo{
                Server:     srv,
                FullMethod: Ccnp_GetMeasurementCount_FullMethodName,
        }
        handler := func(ctx context.Context, req interface{}) (interface{}, error) {
                return srv.(CcnpServer).GetMeasurementCount(ctx, req.(*GetMeasurementCountRequest))
        }
        return interceptor(ctx, in, info, handler)
}

func _Ccnp_GetCcReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
        in := new(GetCcReportRequest)
        if err := dec(in); err != nil {
                return nil, err
        }
        if interceptor == nil {
                return srv.(CcnpServer).GetCcReport(ctx, in)
        }
        info := &grpc.UnaryServerInfo{
                Server:     srv,
                FullMethod: Ccnp_GetCcReport_FullMethodName,
        }
        handler := func(ctx context.Context, req interface{}) (interface{}, error) {
                return srv.(CcnpServer).GetCcReport(ctx, req.(*GetCcReportRequest))
        }
        return interceptor(ctx, in, info, handler)
}

func _Ccnp_GetCcMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
        in := new(GetCcMeasurementRequest)
        if err := dec(in); err != nil {
                return nil, err
        }
        if interceptor == nil {
                return srv.(CcnpServer).GetCcMeasurement(ctx, in)
        }
        info := &grpc.UnaryServerInfo{
                Server:     srv,
                FullMethod: Ccnp_GetCcMeasurement_FullMethodName,
        }
        handler := func(ctx context.Context, req interface{}) (interface{}, error) {
                return srv.(CcnpServer).GetCcMeasurement(ctx, req.(*GetCcMeasurementRequest))
        }
        return interceptor(ctx, in, info, handler)
}

func _Ccnp_GetCcEventlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
        in := new(GetCcEventlogRequest)
        if err := dec(in); err != nil {
                return nil, err
        }
        if interceptor == nil {
                return srv.(CcnpServer).GetCcEventlog(ctx, in)
        }
        info := &grpc.UnaryServerInfo{
                Server:     srv,
                FullMethod: Ccnp_GetCcEventlog_FullMethodName,
        }
        handler := func(ctx context.Context, req interface{}) (interface{}, error) {
                return srv.(CcnpServer).GetCcEventlog(ctx, req.(*GetCcEventlogRequest))
        }
        return interceptor(ctx, in, info, handler)
}

// Ccnp_ServiceDesc is the grpc.ServiceDesc for Ccnp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ccnp_ServiceDesc = grpc.ServiceDesc{
        ServiceName: "ccnp_server_pb.ccnp",
        HandlerType: (*CcnpServer)(nil),
        Methods: []grpc.MethodDesc{
                {
                        MethodName: "GetDefaultAlgorithm",
                        Handler:    _Ccnp_GetDefaultAlgorithm_Handler,
                },
                {
                        MethodName: "GetMeasurementCount",
                        Handler:    _Ccnp_GetMeasurementCount_Handler,
                },
                {
                        MethodName: "GetCcReport",
                        Handler:    _Ccnp_GetCcReport_Handler,
                },
                {
                        MethodName: "GetCcMeasurement",
                        Handler:    _Ccnp_GetCcMeasurement_Handler,
                },
                {
                        MethodName: "GetCcEventlog",
                        Handler:    _Ccnp_GetCcEventlog_Handler,
                },
        },
        Streams:  []grpc.StreamDesc{},
        Metadata: "proto/ccnp-server.proto",
}
